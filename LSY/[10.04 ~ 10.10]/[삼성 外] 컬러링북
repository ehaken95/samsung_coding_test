#include <vector>
#include <queue>
using namespace std;

vector<int> solution(int m, int n, vector<vector<int>> picture) {
	int number_of_area = 0; //영역의 수
	int max_size_of_one_area = 0; //최대 영역
	
    // 0: 상, 1:하, 2:좌, 3:우
	int cx[] = { 0,0,-1,1 };
	int cy[] = { 1,-1,0,0 };

	int current_area; //현재 영역
    
	vector<vector<int>> visited(m, vector<int>(n, 0));//mxn벡터이고 0으로 초기화
    

	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			if (picture[i][j] != 0 && visited[i][j] == 0) {//색칠되어 있고 방문을 안했다면
				number_of_area++;
				current_area = 0;
				int value = picture[i][j]; //value는 그림의 현위치 색깔로 지정
				queue<pair<int, int>> q; //방문할 위치 담는 queue
				q.push(make_pair(i, j));
				while (!q.empty()) { //방문할데가 없을 때 까지
					int dx = q.front().first; 
					int dy = q.front().second;
					current_area++;
					visited[dx][dy] = value;
					q.pop();
					for (int i = 0; i < 4; i++) { //상하좌우 확인
						int nx = cx[i] + dx; //현재 방향으로 상,하,좌,우 더해서 다음 위치를 nx로 지정
						int ny = cy[i] + dy; //현재 방향으로 상,하,좌,우 더해서 다음 위치를 ny로 지정
						if (nx >= 0 && nx < m && ny >= 0 && ny < n &&picture[nx][ny] == value && visited[nx][ny] == 0) {
                            //다음 위치가 벽이 아니고, 같은 색이며 방문하지 않았으면
							picture[nx][ny] = 0; //다음 위치의 색깔을 0으로 수정 왜냐면 0이면 방문하지 않음
							q.push(make_pair(nx, ny)); //q에 다음 위치 넣음
						}
					}
                } //q는 여기까지 반복
				if (current_area > max_size_of_one_area) //만약 현재 크기가 max 크기보다 크면
                    max_size_of_one_area = current_area; //max 크기 갱신
			}
		}
	}
	vector<int> answer(2);
	answer[0] = number_of_area;
	answer[1] = max_size_of_one_area;
	return answer;
}
