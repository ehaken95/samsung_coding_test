#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> solution(int rows, int columns, vector<vector<int>> queries) {
    vector<int> answer;
    vector<int> v;
    int matrix[101][101];
    int n = 1;
    
    for(int y = 1; y <= rows; y++) { //처음 매트릭스 초기화
        for(int x = 1; x <= columns; x++) {
            matrix[y][x] = n;
            n++;
        }
    }
    
    for(int i = 0; i < queries.size(); i++) { //쿼리수만큼 반복문 실행
        int y1 = queries[i][0];
        int x1 = queries[i][1];
        int y2 = queries[i][2];
        int x2 = queries[i][3];
        int start = matrix[y1][x1];
        int minN = start;
        
        for(int ny = y1; ny < y2; ny++) {  //y2열까지 아래로
            matrix[ny][x1] = matrix[ny + 1][x1];
            minN = min(minN, matrix[ny][x1]);
        }
        for(int nx = x1; nx < x2; nx++) { //x2행까지 오른쪽으로
            matrix[y2][nx] = matrix[y2][nx + 1];
            minN = min(minN, matrix[y2][nx]);
        }
        for(int ny = y2; ny > y1; ny--) { //y1열까지 위로
            matrix[ny][x2] = matrix[ny - 1][x2];
            minN = min(minN, matrix[ny][x2]);
        }
        for(int nx = x2; nx > x1; nx--) { //x1행까지 왼쪽으로
            matrix[y1][nx] = matrix[y1][nx - 1];
            if(nx == x1 + 1) //만약 첫 시작인 x1에서 하나 더 오른쪽으로 갔으면
                matrix[y1][nx] = start; //이제 시작 위치 변함
            minN = min(minN, matrix[y1][nx]);
        }
        v.push_back(minN);
    }
    
    for(int i = 0; i < v.size(); i++)
        answer.push_back(v[i]);
    
    return answer;
}
